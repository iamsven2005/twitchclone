// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}
//SQLITE
// model User{
//   id String @id @default(uuid())
//   username String @unique
//   imageUrl String 
//   externalUserId String @unique
//   bio String? 

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

model User {
  id            String       @default(cuid()) @id
  username      String       @unique
  imageUrl      String
  credit        Int?
  theme         String
  externalUserId String      @unique
  bio           String? 

  following Follow[] @relation("Following")
  followedBy Follow[] @relation("FollowedBy")
  blocking Block[] @relation("Blocking")
  blockedBy Block[] @relation("BlockedBy")
  stream Stream?

  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
  @@map(name: "users")
}
model Follow {
    id String @id @default(cuid())
    followerId String
    followingId String

    follower User @relation(name: "Following", fields: [followerId], references: [id], onDelete: Cascade)
    following User @relation(name: "FollowedBy", fields: [followingId], references: [id], onDelete: Cascade)
    createdAt     DateTime  @default(now()) @map(name: "created_at")
    updatedAt     DateTime  @updatedAt @map(name: "updated_at")
    @@unique([followerId, followingId])
    @@index([followerId])
    @@index([followingId])
} 
model Block {
    id String @id @default(cuid())
    blockerId String
    blockedId String
    blockedReason String

    blocker User @relation(name: "Blocking", fields:[blockerId], references:[id], onDelete: Cascade )
    blocked User @relation(name: "BlockedBy", fields:[blockedId], references:[id], onDelete: Cascade )

    @@unique([blockerId, blockedId])
    @@index([blockerId])
    @@index([blockedId])
}

model Stream {
    id String @id @default(cuid())
    name String @db.Text
    thumbnailUrl String? @db.Text

    ingressId String? @unique
    serverUrl String? @db.Text
    streamKey String? @db.Text

    isLive Boolean @default(false)
    isChatEnabled Boolean @default(true)
    isChatDelayed Boolean @default(false)
    isChatFollowersOnly Boolean @default(false)

    userId String @unique
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt     DateTime  @default(now()) @map(name: "created_at")
    updatedAt     DateTime  @updatedAt @map(name: "updated_at")
    @@index([userId])
    @@index([ingressId])
} 
model Message {
    id      String @id @default(cuid())
    name    String @db.Text
    time    String @db.Text
    message String @db.Text
    roomid  String @db.Text
 }