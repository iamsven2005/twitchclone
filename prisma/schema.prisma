// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}
//SQLITE
// model User{
//   id String @id @default(uuid())
//   username String @unique
//   imageUrl String 
//   externalUserId String @unique
//   bio String? 

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }

model User {
  id            String       @default(cuid()) @id
  username      String       @unique
  imageUrl      String
  credit        Int?
  theme         String
  externalUserId String      @unique
  bio           String? 

  following Follow[] @relation("Following")
  followedBy Follow[] @relation("FollowedBy")
  blocking Block[] @relation("Blocking")
  blockedBy Block[] @relation("BlockedBy")
  stream Stream?

  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
  @@map(name: "users")
}
model Follow {
    id String @id @default(cuid())
    followerId String
    followingId String

    follower User @relation(name: "Following", fields: [followerId], references: [id], onDelete: Cascade)
    following User @relation(name: "FollowedBy", fields: [followingId], references: [id], onDelete: Cascade)
    createdAt     DateTime  @default(now()) @map(name: "created_at")
    updatedAt     DateTime  @updatedAt @map(name: "updated_at")
    @@unique([followerId, followingId])
    @@index([followerId])
    @@index([followingId])
} 
model Block {
    id String @id @default(cuid())
    blockerId String
    blockedId String
    blockedReason String

    blocker User @relation(name: "Blocking", fields:[blockerId], references:[id], onDelete: Cascade )
    blocked User @relation(name: "BlockedBy", fields:[blockedId], references:[id], onDelete: Cascade )

    @@unique([blockerId, blockedId])
    @@index([blockerId])
    @@index([blockedId])
}

model Stream {
    id String @id @default(cuid())
    name String @db.Text
    thumbnailUrl String? @db.Text

    ingressId String? @unique
    serverUrl String? @db.Text
    streamKey String? @db.Text

    isLive Boolean @default(false)
    isChatEnabled Boolean @default(true)
    isChatDelayed Boolean @default(false)
    isChatFollowersOnly Boolean @default(false)

    userId String @unique
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt     DateTime  @default(now()) @map(name: "created_at")
    updatedAt     DateTime  @updatedAt @map(name: "updated_at")
    @@index([userId])
    @@index([ingressId])
} 
model Message {
    id      String @id @default(cuid())
    name    String @db.Text
    time    String @db.Text
    message String @db.Text
    roomid  String @db.Text
 }
 model Store {
  id              String    @id @default(cuid())
  name            String
  userId          String
  billboards      Billboard[] @relation("StoreToBillboard")
  categories      Category[] @relation("StoreToCategory")
  products        Product[]  @relation("StoreToProduct")
  sizes           Size[]     @relation("StoreToSize")
  colors          Color[]     @relation("StoreToColor")
  orders          Order[]     @relation("StoreToOrder")
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
}

model Billboard {
  id          String @id @default(cuid())
  storeId     String
  store       Store @relation("StoreToBillboard", fields: [storeId], references: [id])
  label       String
  imageUrl    String
  categories  Category[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([storeId])
}

model Category {
  id          String      @id @default(cuid())
  storeId     String      // Foreign Key to Store
  store       Store       @relation("StoreToCategory", fields: [storeId], references: [id])
  billboardId String      // Foreign Key to Billboard
  billboard   Billboard   @relation(fields: [billboardId], references: [id])
  name        String
  products    Product[]   @relation("CategoryToProduct")
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([storeId])
  @@index([billboardId])
}

model Product {
  id          String    @id @default(cuid())
  storeId     String    // Foreign Key to Store
  store       Store     @relation("StoreToProduct", fields: [storeId], references: [id])
  categoryId  String    // Foreign Key to Category
  category    Category  @relation("CategoryToProduct", fields: [categoryId], references: [id])
  name        String
  price       Decimal
  isFeatured  Boolean   @default(false)
  isArchived  Boolean   @default(false)
  sizeId      String    // Foreign Key to Size
  size        Size      @relation(fields: [sizeId], references: [id])
  colorId     String    // Foreign Key to Color
  color       Color     @relation(fields: [colorId], references: [id])
  images      Image[]   // Relation to Image model
  orderItems  OrderItem[]   // Relation to Order model
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([storeId])
  @@index([categoryId])
  @@index([sizeId])
  @@index([colorId])
}

model Order {
  id        String    @id @default(cuid())
  storeId     String    // Foreign Key to Store
  store       Store     @relation("StoreToOrder", fields: [storeId], references: [id])
  orderItems OrderItem[] // Relation to OrderItem model
  isPaid     Boolean   @default(false)
  phone      String    @default("")
  address    String    @default("")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([storeId])
}

// Intermediary for a many-to-many relationship
model OrderItem {
  id        String  @id @default(cuid())
  orderId   String  // Foreign Key to Order
  order     Order   @relation(fields: [orderId], references: [id])
  productId String  // Foreign Key to Product
  product   Product @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}

model Size {
  id          String    @id @default(cuid())
  storeId     String    // Foreign Key to Store
  store       Store     @relation("StoreToSize", fields: [storeId], references: [id])
  name        String
  value       String
  products    Product[] // Relation to Product model
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([storeId])
}

model Color {
  id          String   @id @default(cuid())
  storeId     String   // Foreign Key to Store
  store       Store    @relation("StoreToColor", fields: [storeId], references: [id])
  name        String
  value       String
  products    Product[] // Relation to Product model
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([storeId])
}

model Image {
  id          String   @id @default(cuid())
  productId   String   // Foreign Key to Product
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  url         String   // URL of the image
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([productId])
}